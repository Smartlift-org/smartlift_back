{
	"info": {
		"_postman_id": "f39deff2-2639-4186-9846-7759f8822ed9",
		"name": "SmartLift API",
		"description": "# üöÄ SmartLift API Collection\n\nThis collection contains all the endpoints for the SmartLift API, including user management, exercises, routines, workouts, personal records, AI workout generation, trainer management, admin functions, and health monitoring.\n\n## üîñ **How to use this collection**\n\n1. Set up your environment variables:\n   - `base_url`: Your API base URL (default: http://127.0.0.1:3000)\n\n2. Start with the authentication flow:\n   - Register a new user\n   - Login to get your JWT token\n\n3. The token will be automatically set and used for all subsequent requests\n\n## üí™ Features\n\n- **JWT Authentication** (login, token validation, password reset)\n- **User Management** (registration, profile management, profile pictures)\n- **Admin Panel** (user and coach management, assignments)\n- **Exercise Management** (CRUD operations, exercise database)\n- **Routine Management** (create, update, delete routines with exercises)\n- **User Stats Tracking** (comprehensive fitness metrics)\n- **Workout Tracking** (routine-based & free-style workouts)\n- **Personal Records Tracking** (automatic PR detection and statistics)\n- **Real-time Set Recording** (detailed workout logging)\n- **Workout Pauses & Resume** (flexible workout management)\n- **AI Workout Generation** (personalized routine creation)\n- **Trainer Dashboard** (coach management and member oversight)\n- **Routine Validation** (trainer approval system)\n- **Health Monitoring** (system health checks)\n\n## üìã Response Formats\n\n### Routine Response Format\n\nWhen fetching or creating a routine, the response will include the following structure:\n\n```json\n{\n    \"id\": 187,                    // Routine ID\n    \"name\": \"Test workout\",      // Routine name\n    \"description\": \"...\",        // Routine description\n    \"difficulty\": \"intermediate\", // Difficulty level\n    \"duration\": 60,               // Duration in minutes\n    \"formatted_created_at\": \"2025-06-11 03:33:39\", // Human-readable creation date\n    \"formatted_updated_at\": \"2025-06-11 03:33:39\", // Human-readable update date\n    \"routine_exercises\": [        // Array of exercises in the routine\n        {\n            \"id\": 58,            // RoutineExercise ID (for CRUD operations)\n            \"routine_id\": 187,    // Reference to the routine\n            \"exercise_id\": 98,    // Reference to the exercise\n            \"sets\": 3,           // Number of sets\n            \"reps\": 12,          // Number of repetitions\n            \"rest_time\": 60,     // Rest time in seconds\n            \"order\": 1,          // Exercise order in the routine\n            \"formatted_created_at\": \"2025-06-11 03:33:39\", // Human-readable creation date\n            \"formatted_updated_at\": \"2025-06-11 03:33:39\", // Human-readable update date\n            \"exercise\": {        // Full exercise details\n                \"id\": 98,\n                \"name\": \"3/4 Sit-Up\",\n                \"equipment\": \"body only\",\n                \"category\": \"strength\",\n                \"level\": \"beginner\",\n                \"primary_muscles\": [\"abdominals\"],\n                \"secondary_muscles\": [],\n                \"image_urls\": [\"...\"],\n                \"difficulty_level\": 1,    // Computed property\n                \"has_equipment\": false    // Computed property\n            }\n        }\n    ]\n}\n```\n\n### Workout Response Format\n\n```json\n{\n    \"id\": 1,\n    \"routine_id\": 123,           // null for free-style workouts\n    \"workout_type\": \"routine_based\", // or \"free_style\"\n    \"name\": \"Full Body Workout\",\n    \"status\": \"in_progress\",     // \"in_progress\", \"paused\", \"completed\", \"abandoned\"\n    \"started_at\": \"2025-01-01T10:00:00Z\",\n    \"completed_at\": null,\n    \"total_duration_seconds\": 3600,\n    \"total_volume\": 2500.0,      // Total weight lifted\n    \"total_sets_completed\": 15,\n    \"total_exercises_completed\": 5,\n    \"average_rpe\": 7.5,\n    \"workout_rating\": 8,\n    \"notes\": \"Excellent session!\",\n    \"exercises\": [               // WorkoutExercises with sets\n        {\n            \"id\": 1,\n            \"exercise_id\": 98,\n            \"order\": 1,\n            \"group_type\": \"regular\", // \"regular\", \"superset\", \"circuit\"\n            \"group_order\": null,\n            \"target_sets\": 3,\n            \"target_reps\": 12,\n            \"suggested_weight\": 80.0,\n            \"notes\": \"\",\n            \"exercise\": { /* exercise details */ },\n            \"sets\": [           // Individual sets performed\n                {\n                    \"id\": 1,\n                    \"set_number\": 1,\n                    \"set_type\": \"normal\", // \"normal\", \"warmup\", \"drop\", \"failure\"\n                    \"weight\": 80.0,\n                    \"reps\": 12,\n                    \"rpe\": 7,\n                    \"completed\": true,\n                    \"completed_at\": \"2025-01-01T10:05:00Z\",\n                    \"is_personal_record\": false,\n                    \"pr_type\": null\n                }\n            ]\n        }\n    ],\n    \"pauses\": [                 // Workout pauses\n        {\n            \"id\": 1,\n            \"reason\": \"rest\",\n            \"paused_at\": \"2025-01-01T10:30:00Z\",\n            \"resumed_at\": \"2025-01-01T10:35:00Z\",\n            \"duration_seconds\": 300\n        }\n    ]\n}\n```\n\n### AI Workout Response Format\n\n```json\n{\n    \"success\": true,\n    \"data\": {\n        \"routines\": [             // Array of generated routines\n            {\n                \"routine\": {\n                    \"name\": \"Upper Body Strength\",\n                    \"description\": \"Focus on chest, shoulders and triceps\",\n                    \"difficulty\": \"intermediate\",\n                    \"duration\": 45,\n                    \"exercises\": [       // Array of exercises in routine\n                        {\n                            \"exercise_id\": 900,\n                            \"name\": \"Bench Press\",\n                            \"sets\": 4,\n                            \"reps\": 10,\n                            \"rest_time\": 60,\n                            \"order\": 1\n                        }\n                    ]\n                }\n            }\n        ],\n        \"generated_at\": \"2025-08-24T18:30:00Z\"\n    }\n}\n```\n\n### AI Exercise Modification Response Format\n\n```json\n{\n    \"success\": true,\n    \"data\": {\n        \"exercises\": [            // Modified exercises array\n            {\n                \"exercise_id\": 125,\n                \"sets\": 4,\n                \"reps\": 10,\n                \"rest_time\": 60,\n                \"order\": 1\n            }\n        ],\n        \"generated_at\": \"2025-08-24T18:30:00Z\"\n    }\n}\n```\n\n## üìã **Parameter Structure**\n\nAll POST/PATCH requests follow Rails Strong Parameters conventions with nested objects:\n\n```json\n// User Registration/Update\n{ \"user\": { \"first_name\": \"John\", \"last_name\": \"Doe\", ... } }\n\n// Exercise Creation\n{ \"exercise\": { \"name\": \"Bench Press\", \"level\": \"intermediate\", ... } }\n\n// Routine Creation/Update\n{ \"routine\": { \"name\": \"Push Day\", \"difficulty\": \"intermediate\", ... } }\n\n// User Stats\n{ \"user_stat\": { \"height\": 180, \"weight\": 75, ... } }\n\n// Workout Actions\n{ \"workout_rating\": 8, \"notes\": \"Great workout!\" }\n{ \"pause\": { \"reason\": \"rest break\" } }\n\n// Workout Exercise Management\n{ \"workout_exercise\": { \"exercise_id\": 98, \"target_sets\": 3, ... } }\n{ \"routine_exercise\": { \"exercise_id\": 98, \"sets\": 3, ... } }\n\n// Set Recording\n{ \"set\": { \"weight\": 80, \"reps\": 12, \"rpe\": 7, ... } }\n{ \"workout_set\": { \"weight\": 85, \"reps\": 10, \"rpe\": 8 } }\n\n// Workout Pauses\n{ \"pause\": { \"reason\": \"bathroom break\" } }\n\n// AI Workout Generation\n{ \"age\": 30, \"gender\": \"male\", \"weight\": 80, \"height\": 175, \"experience_level\": \"intermediate\", \"preferences\": \"No cardio, solo tren superior\", \"frequency_per_week\": 3, \"time_per_session\": 45, \"goal\": \"ganar masa muscular\" }\n\n// AI Workout Exercise Modification\n{ \"user_message\": \"Change the first exercise to a back exercise\", \"exercises\": [{\"exercise_id\": 900, \"sets\": 4, \"reps\": 10, \"rest_time\": 60, \"order\": 1}] }\n\n// Trainer Member Assignment\n{ \"user_id\": 123 }\n\n// Admin User Creation\n{ \"user\": { \"first_name\": \"John\", \"last_name\": \"Doe\", \"email\": \"john@example.com\", \"role\": \"user\" } }\n\n// Password Reset\n{ \"token\": \"reset_token\", \"password\": \"newpassword\", \"password_confirmation\": \"newpassword\" }\n```\n\n## üîê **Authentication & Authorization**\n\n### User Roles\n- **user**: Regular users who can create workouts and track progress\n- **coach**: Trainers who can manage members and validate routines\n- **admin**: Administrators with full system access\n\n### Protected Endpoints\nMost endpoints require JWT authentication via the `Authorization` header with format: `Bearer <token>`\n\n### Role-Based Access\n- Admin endpoints (`/admin/*`) require admin role\n- Trainer endpoints (`/api/v1/trainers/*`) require coach role\n- User data is scoped to the authenticated user unless admin/coach access is granted\n\nNotes:\n- Workout types: `routine_based` (follows a predefined routine) or `free_style` (exercises added during workout)\n- The `routine_exercise.id` is used for updating/deleting specific exercises in a routine\n- The `exercise_id` is kept for reference and validation\n- Full exercise details are included to avoid additional API calls\n- Timestamps are formatted for better readability\n- Computed properties (`difficulty_level` and `has_equipment`) are included for frontend logic\n- **Login endpoint is the only exception** - parameters are sent at root level (`email`, `password`)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27249468"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3002",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful registration\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('first_name');",
									"    pm.expect(response).to.have.property('last_name');",
									"    console.log('User registered successfully:', response.email);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "SmartLift Mobile App v1.0.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"first_name\": \"Son\",\n    \"last_name\": \"Goku\",\n    \"email\": \"email@email.com\",\n    \"password\": \"123123\",\n    \"password_confirmation\": \"123123\"\n  }\n}"
						},
						"url": "{{base_url}}/users"
					}
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful login\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('token');",
									"    // Set token in collection variable",
									"    if (response.token) {",
									"        pm.collectionVariables.set('token', 'Bearer ' + response.token);",
									"        console.log('Token set from login:', pm.collectionVariables.get('token'));",
									"    } else {",
									"        console.error('No token in response');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "SmartLift Mobile App v1.0.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"email@email.com\",\n  \"password\": \"123123\"\n}"
						},
						"url": "{{base_url}}/auth/login"
					}
				},
				{
					"name": "get current_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get current user\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('first_name');",
									"    pm.expect(response).to.have.property('last_name');",
									"    console.log('Using token:', pm.collectionVariables.get('token'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/profile"
					}
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update user\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('first_name', 'Son');",
									"    pm.expect(response).to.have.property('last_name', 'Goku');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"first_name\": \"Son\",\n    \"last_name\": \"Goku\"\n  }\n}"
						},
						"url": "{{base_url}}/users/1"
					}
				}
			]
		},
		{
			"name": "exercises",
			"item": [
				{
					"name": "get exercises list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get exercises list\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/exercises"
					}
				},
				{
					"name": "get exercise by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get exercise by id\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('level');",
									"    pm.expect(response).to.have.property('force');",
									"    pm.expect(response).to.have.property('mechanic');",
									"    pm.expect(response).to.have.property('equipment');",
									"    pm.expect(response).to.have.property('category');",
									"    pm.expect(response).to.have.property('instructions');",
									"    pm.expect(response).to.have.property('primary_muscles');",
									"    pm.expect(response).to.have.property('secondary_muscles');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/exercises/98"
					}
				},
				{
					"name": "create exercise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create exercise\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name', 'Exercise Name');",
									"    pm.expect(response).to.have.property('level', 'beginner');",
									"    pm.expect(response).to.have.property('force', 'push');",
									"    pm.expect(response).to.have.property('mechanic', 'compound');",
									"    pm.expect(response).to.have.property('equipment', 'barbell');",
									"    pm.expect(response).to.have.property('category', 'strength');",
									"    pm.expect(response).to.have.property('instructions');",
									"    pm.expect(response).to.have.property('primary_muscles');",
									"    pm.expect(response).to.have.property('secondary_muscles');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exercise\": {\n    \"name\": \"Exercise Name\",\n    \"level\": \"beginner\",\n    \"force\": \"push\",\n    \"mechanic\": \"compound\",\n    \"equipment\": \"barbell\",\n    \"category\": \"strength\",\n    \"instructions\": [\"Step 1\", \"Step 2\"],\n    \"primary_muscles\": [\"chest\", \"triceps\"],\n    \"secondary_muscles\": [\"shoulders\"],\n    \"images\": []\n  }\n}"
						},
						"url": "{{base_url}}/exercises"
					}
				}
			]
		},
		{
			"name": "user_stats",
			"item": [
				{
					"name": "get user stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get user stats\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('height');",
									"    pm.expect(response).to.have.property('weight');",
									"    pm.expect(response).to.have.property('age');",
									"    pm.expect(response).to.have.property('gender');",
									"    pm.expect(response).to.have.property('fitness_goal');",
									"    pm.expect(response).to.have.property('experience_level');",
									"    pm.expect(response).to.have.property('available_days');",
									"    pm.expect(response).to.have.property('equipment_available');",
									"    pm.expect(response).to.have.property('activity_level');",
									"    pm.expect(response).to.have.property('physical_limitations');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/user_stats"
					}
				},
				{
					"name": "create user stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create user stats\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('height', 180.5);",
									"    pm.expect(response).to.have.property('weight', 75.0);",
									"    pm.expect(response).to.have.property('age', 30);",
									"    pm.expect(response).to.have.property('gender', 'male');",
									"    pm.expect(response).to.have.property('fitness_goal', 'lose weight');",
									"    pm.expect(response).to.have.property('experience_level', 'beginner');",
									"    pm.expect(response).to.have.property('available_days', 3);",
									"    pm.expect(response).to.have.property('equipment_available', 'dumbbells');",
									"    pm.expect(response).to.have.property('activity_level', 'moderate');",
									"    pm.expect(response).to.have.property('physical_limitations', 'none');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_stat\": {\n    \"height\": 180.5,\n    \"weight\": 75.0,\n    \"age\": 30,\n    \"gender\": \"male\",\n    \"fitness_goal\": \"lose weight\",\n    \"experience_level\": \"beginner\",\n    \"available_days\": 3,\n    \"equipment_available\": \"dumbbells\",\n    \"activity_level\": \"moderate\",\n    \"physical_limitations\": \"none\"\n  }\n}"
						},
						"url": "{{base_url}}/user_stats"
					}
				},
				{
					"name": "update user stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update user stats\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('height', 185.0);",
									"    pm.expect(response).to.have.property('weight', 78.0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_stat\": {\n    \"height\": 185.0,\n    \"weight\": 78.0\n  }\n}"
						},
						"url": "{{base_url}}/user_stats"
					}
				}
			]
		},
		{
			"name": "routines",
			"item": [
				{
					"name": "get routines list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get routines list\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('name');",
									"        pm.expect(response[0]).to.have.property('description');",
									"        pm.expect(response[0]).to.have.property('difficulty');",
									"        pm.expect(response[0]).to.have.property('duration');",
									"        pm.expect(response[0]).to.have.property('formatted_created_at');",
									"        pm.expect(response[0]).to.have.property('formatted_updated_at');",
									"        pm.expect(response[0]).to.have.property('routine_exercises');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/routines?difficulty=beginner&max_duration=60",
							"host": ["{{base_url}}"],
							"path": ["routines"],
							"query": [
								{
									"key": "difficulty",
									"value": "beginner"
								},
								{
									"key": "max_duration",
									"value": "60"
								}
							]
						}
					}
				},
				{
					"name": "get routine by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get routine by id\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('description');",
									"    pm.expect(response).to.have.property('difficulty');",
									"    pm.expect(response).to.have.property('duration');",
									"    pm.expect(response).to.have.property('formatted_created_at');",
									"    pm.expect(response).to.have.property('formatted_updated_at');",
									"    pm.expect(response).to.have.property('routine_exercises');",
									"    pm.expect(response.routine_exercises).to.be.an('array');",
									"    if (response.routine_exercises.length > 0) {",
									"        const exercise = response.routine_exercises[0];",
									"        pm.expect(exercise).to.have.property('id');",
									"        pm.expect(exercise).to.have.property('routine_id');",
									"        pm.expect(exercise).to.have.property('exercise_id');",
									"        pm.expect(exercise).to.have.property('sets');",
									"        pm.expect(exercise).to.have.property('reps');",
									"        pm.expect(exercise).to.have.property('rest_time');",
									"        pm.expect(exercise).to.have.property('order');",
									"        pm.expect(exercise).to.have.property('formatted_created_at');",
									"        pm.expect(exercise).to.have.property('formatted_updated_at');",
									"        pm.expect(exercise).to.have.property('exercise');",
									"        pm.expect(exercise.exercise).to.have.property('id');",
									"        pm.expect(exercise.exercise).to.have.property('name');",
									"        pm.expect(exercise.exercise).to.have.property('equipment');",
									"        pm.expect(exercise.exercise).to.have.property('category');",
									"        pm.expect(exercise.exercise).to.have.property('level');",
									"        pm.expect(exercise.exercise).to.have.property('primary_muscles');",
									"        pm.expect(exercise.exercise).to.have.property('secondary_muscles');",
									"        pm.expect(exercise.exercise).to.have.property('image_urls');",
									"        pm.expect(exercise.exercise).to.have.property('difficulty_level');",
									"        pm.expect(exercise.exercise).to.have.property('has_equipment');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/routines/1"
					}
				},
				{
					"name": "create routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create routine\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name', 'Full Body Workout');",
									"    pm.expect(response).to.have.property('description', 'Complete workout for all muscle groups');",
									"    pm.expect(response).to.have.property('difficulty', 'intermediate');",
									"    pm.expect(response).to.have.property('duration', 60);",
									"    pm.expect(response).to.have.property('formatted_created_at');",
									"    pm.expect(response).to.have.property('formatted_updated_at');",
									"    pm.expect(response).to.have.property('routine_exercises');",
									"    pm.expect(response.routine_exercises).to.be.an('array');",
									"    if (response.routine_exercises.length > 0) {",
									"        const exercise = response.routine_exercises[0];",
									"        pm.expect(exercise).to.have.property('id');",
									"        pm.expect(exercise).to.have.property('routine_id');",
									"        pm.expect(exercise).to.have.property('exercise_id', 98);",
									"        pm.expect(exercise).to.have.property('sets', 3);",
									"        pm.expect(exercise).to.have.property('reps', 12);",
									"        pm.expect(exercise).to.have.property('rest_time', 60);",
									"        pm.expect(exercise).to.have.property('order', 1);",
									"        pm.expect(exercise).to.have.property('formatted_created_at');",
									"        pm.expect(exercise).to.have.property('formatted_updated_at');",
									"        pm.expect(exercise).to.have.property('exercise');",
									"        pm.expect(exercise.exercise).to.have.property('id', 98);",
									"        pm.expect(exercise.exercise).to.have.property('name');",
									"        pm.expect(exercise.exercise).to.have.property('equipment');",
									"        pm.expect(exercise.exercise).to.have.property('category');",
									"        pm.expect(exercise.exercise).to.have.property('level');",
									"        pm.expect(exercise.exercise).to.have.property('primary_muscles');",
									"        pm.expect(exercise.exercise).to.have.property('secondary_muscles');",
									"        pm.expect(exercise.exercise).to.have.property('image_urls');",
									"        pm.expect(exercise.exercise).to.have.property('difficulty_level');",
									"        pm.expect(exercise.exercise).to.have.property('has_equipment');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"routine\": {\n    \"name\": \"Full Body Workout\",\n    \"description\": \"Complete workout for all muscle groups\",\n    \"difficulty\": \"intermediate\",\n    \"duration\": 60,\n    \"routine_exercises_attributes\": [\n      {\n        \"exercise_id\": 98,\n        \"sets\": 3,\n        \"reps\": 12,\n        \"rest_time\": 60,\n        \"order\": 1\n      }\n    ]\n  }\n}"
						},
						"url": "{{base_url}}/routines"
					}
				},
				{
					"name": "update routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update routine\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name', 'Updated Full Body Workout');",
									"    pm.expect(response).to.have.property('duration', 45);",
									"    pm.expect(response).to.have.property('routine_exercises');",
									"    pm.expect(response.routine_exercises).to.be.an('array');",
									"    pm.expect(response.routine_exercises[0]).to.have.property('exercise_id', 99);",
									"    pm.expect(response.routine_exercises[0]).to.have.property('sets', 4);",
									"    pm.expect(response.routine_exercises[0]).to.have.property('reps', 10);",
									"    pm.expect(response.routine_exercises[0]).to.have.property('rest_time', 45);",
									"    pm.expect(response.routine_exercises[0]).to.have.property('order', 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"routine\": {\n    \"name\": \"Updated Full Body Workout\",\n    \"duration\": 45,\n    \"routine_exercises_attributes\": [\n      {\n        \"id\": 1,\n        \"_destroy\": true\n      },\n      {\n        \"exercise_id\": 99,\n        \"sets\": 4,\n        \"reps\": 10,\n        \"rest_time\": 45,\n        \"order\": 1\n      }\n    ]\n  }\n}"
						},
						"url": "{{base_url}}/routines/1"
					}
				},
				{
					"name": "delete routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete routine\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/routines/1"
					}
				},
				{
					"name": "add exercise to routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add exercise to routine\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('routine_id');",
									"    pm.expect(response).to.have.property('exercise_id', 98);",
									"    pm.expect(response).to.have.property('sets', 3);",
									"    pm.expect(response).to.have.property('reps', 12);",
									"    pm.expect(response).to.have.property('rest_time', 60);",
									"    pm.expect(response).to.have.property('order', 1);",
									"    pm.expect(response).to.have.property('formatted_created_at');",
									"    pm.expect(response).to.have.property('formatted_updated_at');",
									"    pm.expect(response).to.have.property('exercise');",
									"    pm.expect(response.exercise).to.have.property('id', 98);",
									"    pm.expect(response.exercise).to.have.property('name');",
									"    pm.expect(response.exercise).to.have.property('equipment');",
									"    pm.expect(response.exercise).to.have.property('category');",
									"    pm.expect(response.exercise).to.have.property('level');",
									"    pm.expect(response.exercise).to.have.property('primary_muscles');",
									"    pm.expect(response.exercise).to.have.property('secondary_muscles');",
									"    pm.expect(response.exercise).to.have.property('image_urls');",
									"    pm.expect(response.exercise).to.have.property('difficulty_level');",
									"    pm.expect(response.exercise).to.have.property('has_equipment');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"routine_exercise\": {\n    \"exercise_id\": 98,\n    \"sets\": 3,\n    \"reps\": 12,\n    \"rest_time\": 60,\n    \"order\": 1\n  }\n}"
						},
						"url": "{{base_url}}/routines/1/exercises"
					}
				},
				{
					"name": "remove exercise from routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Remove exercise from routine\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/routines/1/exercises/1"
					}
				}
			]
		},
		{
			"name": "workouts",
			"item": [
				{
					"name": "create workout from routine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create workout from routine\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('routine_id');",
									"    pm.expect(response).to.have.property('workout_type', 'routine_based');",
									"    pm.expect(response).to.have.property('status', 'in_progress');",
									"    pm.expect(response).to.have.property('started_at');",
									"    pm.expect(response).to.have.property('exercises');",
									"    pm.expect(response.exercises).to.be.an('array');",
									"    pm.collectionVariables.set('workout_id', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"workout\": {\n    \"routine_id\": 1,\n    \"name\": \"Custom Workout Name\"\n  }\n}"
						},
						"url": "{{base_url}}/workouts"
					}
				},
				{
					"name": "create free-style workout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create free-style workout\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('routine_id', null);",
									"    pm.expect(response).to.have.property('workout_type', 'free_style');",
									"    pm.expect(response).to.have.property('status', 'in_progress');",
									"    pm.expect(response).to.have.property('started_at');",
									"    pm.expect(response).to.have.property('name', 'My Free Workout');",
									"    pm.collectionVariables.set('free_workout_id', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"workout\": {\n    \"name\": \"My Free Workout\"\n  }\n}"
						},
						"url": "{{base_url}}/workouts/free"
					}
				},
				{
					"name": "get workouts list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get workouts list\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('workout_type');",
									"        pm.expect(response[0]).to.have.property('status');",
									"        pm.expect(response[0]).to.have.property('started_at');",
									"        pm.expect(response[0]).to.have.property('exercises');",
									"        pm.expect(response[0]).to.have.property('pauses');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workouts"
					}
				},
				{
					"name": "get workout by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get workout by id\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('workout_type');",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('started_at');",
									"    pm.expect(response).to.have.property('total_duration_seconds');",
									"    pm.expect(response).to.have.property('total_volume');",
									"    pm.expect(response).to.have.property('exercises');",
									"    pm.expect(response).to.have.property('pauses');",
									"    pm.expect(response.exercises).to.be.an('array');",
									"    pm.expect(response.pauses).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workouts/{{workout_id}}"
					}
				},
				{
					"name": "pause workout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pause workout\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('status', 'paused');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pause\": {\n    \"reason\": \"rest break\"\n  }\n}"
						},
						"url": "{{base_url}}/workouts/{{workout_id}}/pause"
					}
				},
				{
					"name": "resume workout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resume workout\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('status', 'in_progress');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workouts/{{workout_id}}/resume"
					}
				},
				{
					"name": "complete workout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Complete workout\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('status', 'completed');",
									"    pm.expect(response).to.have.property('completed_at');",
									"    pm.expect(response).to.have.property('workout_rating', 8);",
									"    pm.expect(response).to.have.property('total_duration_seconds', 3600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"workout_rating\": 8,\n  \"notes\": \"Excellent workout today!\",\n  \"total_duration_seconds\": 3600\n}"
						},
						"url": "{{base_url}}/workouts/{{workout_id}}/complete"
					}
				},
				{
					"name": "abandon workout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Abandon workout\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('status', 'abandoned');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workouts/{{workout_id}}/abandon"
					}
				}
			]
		},
		{
			"name": "workout_exercises",
			"item": [
				{
					"name": "add exercise to workout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add exercise to workout\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('exercise_id', 98);",
									"    pm.expect(response).to.have.property('target_sets', 3);",
									"    pm.expect(response).to.have.property('target_reps', 12);",
									"    pm.expect(response).to.have.property('suggested_weight', 80);",
									"    pm.expect(response).to.have.property('group_type', 'regular');",
									"    pm.expect(response).to.have.property('exercise');",
									"    pm.expect(response).to.have.property('sets');",
									"    pm.collectionVariables.set('workout_exercise_id', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"workout_exercise\": {\n    \"exercise_id\": 98,\n    \"target_sets\": 3,\n    \"target_reps\": 12,\n    \"suggested_weight\": 80,\n    \"group_type\": \"regular\",\n    \"order\": 1,\n    \"notes\": \"Focus on form\"\n  }\n}"
						},
						"url": "{{base_url}}/workout/exercises"
					}
				},
				{
					"name": "get workout exercises",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get workout exercises\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('exercise_id');",
									"        pm.expect(response[0]).to.have.property('target_sets');",
									"        pm.expect(response[0]).to.have.property('target_reps');",
									"        pm.expect(response[0]).to.have.property('sets');",
									"        pm.expect(response[0]).to.have.property('exercise');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workout/exercises"
					}
				},
				{
					"name": "record set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Record set\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('sets');",
									"    pm.expect(response.sets).to.be.an('array');",
									"    if (response.sets.length > 0) {",
									"        const lastSet = response.sets[response.sets.length - 1];",
									"        pm.expect(lastSet).to.have.property('weight', 80);",
									"        pm.expect(lastSet).to.have.property('reps', 12);",
									"        pm.expect(lastSet).to.have.property('rpe', 7);",
									"        pm.expect(lastSet).to.have.property('completed', true);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"set\": {\n    \"weight\": 80,\n    \"reps\": 12,\n    \"rpe\": 7,\n    \"set_type\": \"normal\"\n  }\n}"
						},
						"url": "{{base_url}}/workout/exercises/{{workout_exercise_id}}/record_set"
					}
				},
				{
					"name": "record drop set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Record drop set\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('sets');",
									"    pm.expect(response.sets).to.be.an('array');",
									"    if (response.sets.length > 0) {",
									"        const lastSet = response.sets[response.sets.length - 1];",
									"        pm.expect(lastSet).to.have.property('set_type', 'drop');",
									"        pm.expect(lastSet).to.have.property('drop_set_weight', 60);",
									"        pm.expect(lastSet).to.have.property('drop_set_reps', 8);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"set\": {\n    \"weight\": 75,\n    \"reps\": 10,\n    \"rpe\": 8,\n    \"set_type\": \"drop\",\n    \"drop_set_weight\": 60,\n    \"drop_set_reps\": 8\n  }\n}"
						},
						"url": "{{base_url}}/workout/exercises/{{workout_exercise_id}}/record_set"
					}
				},
				{
					"name": "complete exercise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Complete exercise\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    // Add specific completion validations if needed",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workout/exercises/{{workout_exercise_id}}/complete"
					}
				}
			]
		},
		{
			"name": "workout_sets",
			"item": [
				{
					"name": "create set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create set\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('set_number');",
									"    pm.expect(response).to.have.property('set_type', 'normal');",
									"    pm.expect(response).to.have.property('completed', false);",
									"    pm.collectionVariables.set('workout_set_id', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"set\": {\n    \"set_type\": \"normal\",\n    \"rest_time_seconds\": 60,\n    \"notes\": \"First set\"\n  }\n}"
						},
						"url": "{{base_url}}/workout/exercises/{{workout_exercise_id}}/sets"
					}
				},
				{
					"name": "start set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Start set\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('started_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workout/exercises/{{workout_exercise_id}}/sets/{{workout_set_id}}/start"
					}
				},
				{
					"name": "complete set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Complete set\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('completed', true);",
									"    pm.expect(response).to.have.property('completed_at');",
									"    pm.expect(response).to.have.property('weight', 85);",
									"    pm.expect(response).to.have.property('reps', 10);",
									"    pm.expect(response).to.have.property('rpe', 8);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"workout_set\": {\n    \"weight\": 85,\n    \"reps\": 10,\n    \"rpe\": 8\n  }\n}"
						},
						"url": "{{base_url}}/workout/exercises/{{workout_exercise_id}}/sets/{{workout_set_id}}/complete"
					}
				},
				{
					"name": "get exercise sets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get exercise sets\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('set_number');",
									"        pm.expect(response[0]).to.have.property('set_type');",
									"        pm.expect(response[0]).to.have.property('completed');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workout/exercises/{{workout_exercise_id}}/sets"
					}
				}
			]
		},
		{
			"name": "workout_pauses",
			"item": [
				{
					"name": "create pause",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create pause\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('reason', 'bathroom break');",
									"    pm.expect(response).to.have.property('paused_at');",
									"    pm.expect(response).to.have.property('resumed_at', null);",
									"    pm.collectionVariables.set('workout_pause_id', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pause\": {\n    \"reason\": \"bathroom break\"\n  }\n}"
						},
						"url": "{{base_url}}/workout/pauses"
					}
				},
				{
					"name": "get current pause",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get current pause\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('reason');",
									"    pm.expect(response).to.have.property('paused_at');",
									"    pm.expect(response).to.have.property('resumed_at', null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workout/pauses/current"
					}
				},
				{
					"name": "resume from pause",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resume from pause\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('resumed_at');",
									"    pm.expect(response.resumed_at).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workout/pauses/{{workout_pause_id}}/resume"
					}
				},
				{
					"name": "get all pauses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all pauses\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('reason');",
									"        pm.expect(response[0]).to.have.property('paused_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/workout/pauses"
					}
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "validate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate token\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('user');",
									"    pm.expect(response.user).to.have.property('id');",
									"    pm.expect(response.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/auth/validate-token"
					}
				},
				{
					"name": "forgot password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Forgot password\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"email@email.com\"\n}"
						},
						"url": "{{base_url}}/auth/forgot-password"
					}
				},
				{
					"name": "reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Reset password\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"your_reset_token_here\",\n  \"password\": \"newpassword123\",\n  \"password_confirmation\": \"newpassword123\"\n}"
						},
						"url": "{{base_url}}/auth/reset-password"
					}
				}
			]
		},
		{
			"name": "profile_pictures",
			"item": [
				{
					"name": "upload profile picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Upload profile picture\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "profile_picture",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": "{{base_url}}/users/profile-picture"
					}
				},
				{
					"name": "get profile picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get profile picture\", function () {",
									"    pm.response.to.have.status(200);",
									"    // Response should be image binary data",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/users/1/profile-picture"
					}
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "get coaches list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get coaches list\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/admin/coaches"
					}
				},
				{
					"name": "get users list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get users list\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/admin/users"
					}
				},
				{
					"name": "assign users to coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Assign users to coach\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_ids\": [1, 2, 3]\n}"
						},
						"url": "{{base_url}}/admin/coaches/1/assign-users"
					}
				},
				{
					"name": "create user by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create user by admin\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"user\"\n  }\n}"
						},
						"url": "{{base_url}}/admin/users"
					}
				}
			]
		},
		{
			"name": "user_stats_complete",
			"item": [
				{
					"name": "get complete user stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get complete user stats\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('user_stats');",
									"    pm.expect(response).to.have.property('workout_history');",
									"    pm.expect(response).to.have.property('personal_records');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/user_stats/complete"
					}
				}
			]
		},
		{
			"name": "api_v1",
			"item": [
				{
					"name": "ai_workout_routines",
					"item": [
						{
							"name": "generate ai workout routine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Generate AI workout routine\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('success', true);",
											"    pm.expect(response.data).to.have.property('routines');",
											"    pm.expect(response.data.routines).to.be.an('array');",
											"    pm.expect(response.data).to.have.property('generated_at');",
											"});",
											"",
											"pm.test(\"Handle validation errors\", function () {",
											"    if (pm.response.code === 400) {",
											"        const response = pm.response.json();",
											"        pm.expect(response).to.have.property('success', false);",
											"        pm.expect(response).to.have.property('error');",
											"        pm.expect(response).to.have.property('details');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"age\": 30,\n  \"gender\": \"male\",\n  \"weight\": 80,\n  \"height\": 175,\n  \"experience_level\": \"intermediate\",\n  \"preferences\": \"No cardio, solo tren superior\",\n  \"frequency_per_week\": 3,\n  \"time_per_session\": 45,\n  \"goal\": \"ganar masa muscular\"\n}"
								},
								"url": "{{base_url}}/api/v1/ai/workout_routines"
							}
						},
						{
							"name": "modify ai workout exercises",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Modify AI workout exercises\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('success', true);",
											"    pm.expect(response.data).to.have.property('exercises');",
											"    pm.expect(response.data.exercises).to.be.an('array');",
											"    pm.expect(response.data).to.have.property('generated_at');",
											"});",
											"",
											"pm.test(\"Handle modification errors\", function () {",
											"    if (pm.response.code === 400) {",
											"        const response = pm.response.json();",
											"        pm.expect(response).to.have.property('success', false);",
											"        pm.expect(response).to.have.property('error');",
											"        pm.expect(response).to.have.property('details');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_message\": \"Change the first exercise to a back exercise\",\n  \"exercises\": [\n    {\n      \"exercise_id\": 900,\n      \"sets\": 4,\n      \"reps\": 10,\n      \"rest_time\": 60,\n      \"order\": 1\n    },\n    {\n      \"exercise_id\": 901,\n      \"sets\": 3,\n      \"reps\": 12,\n      \"rest_time\": 45,\n      \"order\": 2\n    }\n  ]\n}"
								},
								"url": "{{base_url}}/api/v1/ai/workout_routines/modify"
							}
						}
					]
				},
				{
					"name": "trainers",
					"item": [
						{
							"name": "get trainer info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get trainer info\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('name');",
											"    pm.expect(response).to.have.property('email');",
											"    pm.expect(response).to.have.property('members_count');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{base_url}}/api/v1/trainers/1"
							}
						},
						{
							"name": "get trainer members",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get trainer members\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('members');",
											"    pm.expect(response).to.have.property('pagination');",
											"    pm.expect(response.members).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/trainers/1/members?search=Juan&status=active&page=1&per_page=10",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "trainers", "1", "members"],
									"query": [
										{
											"key": "search",
											"value": "Juan"
										},
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							}
						},
						{
							"name": "get trainer dashboard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get trainer dashboard\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('trainer');",
											"    pm.expect(response).to.have.property('dashboard');",
											"    pm.expect(response.dashboard).to.have.property('overview');",
											"    pm.expect(response.dashboard).to.have.property('activity_metrics');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{base_url}}/api/v1/trainers/1/dashboard"
							}
						},
						{
							"name": "assign member to trainer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Assign member to trainer\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('message');",
											"    pm.expect(response).to.have.property('assignment');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": 2\n}"
								},
								"url": "{{base_url}}/api/v1/trainers/1/members"
							}
						},
						{
							"name": "unassign member from trainer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unassign member from trainer\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('message');",
											"    pm.expect(response).to.have.property('unassigned');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{base_url}}/api/v1/trainers/1/members/2"
							}
						},
						{
							"name": "get member routines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get member routines\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{base_url}}/api/v1/trainers/1/members/2/routines"
							}
						}
					]
				},
				{
					"name": "routine_validations",
					"item": [
						{
							"name": "get pending validations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get pending validations\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{base_url}}/api/v1/routine_validations"
							}
						},
						{
							"name": "approve routine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Approve routine\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('message');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{base_url}}/api/v1/routine_validations/1/approve"
							}
						},
						{
							"name": "reject routine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reject routine\", function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('message');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"reason\": \"Routine does not meet safety standards\"\n}"
								},
								"url": "{{base_url}}/api/v1/routine_validations/1/reject"
							}
						}
					]
				}
			]
		},
		{
			"name": "health_checks",
			"item": [
				{
					"name": "health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health check\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/health"
					}
				},
				{
					"name": "rails health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Rails health check\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/up"
					}
				}
			]
		},
		{
			"name": "personal_records",
			"item": [
				{
					"name": "get all personal records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all personal records\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('weight');",
									"        pm.expect(response[0]).to.have.property('reps');",
									"        pm.expect(response[0]).to.have.property('is_personal_record', true);",
									"        pm.expect(response[0]).to.have.property('pr_type');",
									"        pm.expect(response[0]).to.have.property('exercise');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/personal_records?limit=20",
							"host": ["{{base_url}}"],
							"path": ["personal_records"],
							"query": [
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "get personal records by exercise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get personal records by exercise\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('is_personal_record', true);",
									"        pm.expect(response[0].exercise).to.have.property('id', 98);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/personal_records/by_exercise/98"
					}
				},
				{
					"name": "get recent personal records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get recent personal records\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('is_personal_record', true);",
									"        pm.expect(response[0]).to.have.property('created_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/personal_records/recent"
					}
				},
				{
					"name": "get latest personal records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get latest personal records\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('is_personal_record', true);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/personal_records/latest?days=30&limit=10",
							"host": ["{{base_url}}"],
							"path": ["personal_records", "latest"],
							"query": [
								{
									"key": "days",
									"value": "30"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "get personal records statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get personal records statistics\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('total_prs');",
									"    pm.expect(response).to.have.property('weight_prs');",
									"    pm.expect(response).to.have.property('reps_prs');",
									"    pm.expect(response).to.have.property('volume_prs');",
									"    pm.expect(response).to.have.property('exercises_with_prs');",
									"    pm.expect(response).to.have.property('recent_prs_this_week');",
									"    pm.expect(response).to.have.property('recent_prs_this_month');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/personal_records/statistics"
					}
				},
				{
					"name": "get personal record by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get personal record by id\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('weight');",
									"    pm.expect(response).to.have.property('reps');",
									"    pm.expect(response).to.have.property('is_personal_record', true);",
									"    pm.expect(response).to.have.property('pr_type');",
									"    pm.expect(response).to.have.property('exercise');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": "{{base_url}}/personal_records/1"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:3000"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "workout_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "free_workout_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "workout_exercise_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "workout_set_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "workout_pause_id",
			"value": "",
			"type": "string"
		}
	]
}